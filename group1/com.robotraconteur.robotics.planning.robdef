service com.robotraconteur.robotics.planning

stdver 0.9

import com.robotraconteur.geometry
import com.robotraconteur.robotics.robot
import com.robotraconteur.robotics.trajectory
import com.robotraconteur.geometry.shapes

using com.robotraconteur.geometry.NamedTransform
using com.robotraconteur.geometry.NamedPose
using com.robotraconteur.geometry.Vector3
using com.robotraconteur.robotics.trajectory.JointTrajectory
using com.robotraconteur.robotics.robot.RobotInfo
using com.robotraconteur.robotics.robot.RobotState
using com.robotraconteur.geometry.shapes.ShapeObject

enum PlannerStatusCode
	is_not_configured = -2,
	failure = -1,
	unknown = 0,
	is_configured = 1,
	running = 2,
	success = 3	
end

struct EnvState
	field double[]{string} joints
	field NamedTransform{string} transforms
	field varvalue{string} extended
end

struct PlanningRequest
	field string name
	field EnvState start_state
	field string config
	field string config_format
	field varvalue{string} extended
end

struct PlanningResponse
	field PlannerStatusCode status_code
	field JointTrajectory joint_trajectory
	field varvalue{string} extended
end

struct ContactResult
	field double distance
	field uint8 shape1_type_id
	field uint8 shape2_type_id
	field string shape1_name
	field string shape2_name
	field uint32 shape1_subid
	field uint32 shape2_subid
	field Vector3 shape1_nearest_point
	field Vector3 shape2_nearest_point
	field Vector3 normal
	field Vector3 shape1_cc_nearest_points
	field Vector3 shape2_cc_nearest_points
	field double cc_time
	field uint8 cc_type
	field varvalue{string} extended
end

struct InvKinResult
	field double[]{list} joints
end

object Planner
	function PlanningResponse{generator} plan(PlanningRequest request)
	
	function ContactResult{list} compute_contacts(EnvState state)
	
	function InvKinResult{list} invkin(string robot_name, NamedPose tcp_pose)
end

object PlanningScene
	property EnvState env_state

	property RobotInfo{string} robots [readonly]
	property RobotState{string} robot_states [readonly]
	property ShapeObject{string} shapes [readonly]
	property NamedTransform{string} transforms [readonly]
	
	function void add_robot(string name, RobotInfo robot, NamedPose pose)
	function void update_robot_info(string robot_name, RobotInfo robot)
	function void update_robot_state(string robot_name, RobotState robot_state)
	
	function void add_shape(string shape_name, ShapeObject shape, NamedPose pose)
	
	function void remove_item(string name)	
	function void move_item(string name, NamedPose transform)
end
